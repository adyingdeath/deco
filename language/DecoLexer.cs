//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Deco.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DecoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, COMMAND=23, STRING=24, 
		TRUE=25, FALSE=26, IDENTIFIER=27, NUMBER=28, WS=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "COMMAND", "STRING", "TRUE", 
		"FALSE", "IDENTIFIER", "NUMBER", "WS"
	};


	public DecoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DecoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'@'", "'('", "','", "')'", "'{'", "'}'", "';'", "'||'", "'&&'", 
		"'=='", "'!='", "'>='", "'<='", "'>'", "'<'", "'+'", "'-'", "'*'", "'/'", 
		"'!'", "'='", "'return'", null, null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "COMMAND", 
		"STRING", "TRUE", "FALSE", "IDENTIFIER", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Deco.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DecoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,175,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,
		1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
		1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
		5,22,120,8,22,10,22,12,22,123,9,22,1,22,1,22,1,23,1,23,1,23,1,23,5,23,
		131,8,23,10,23,12,23,134,9,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,
		1,25,1,25,1,25,1,25,1,25,1,26,1,26,5,26,151,8,26,10,26,12,26,154,9,26,
		1,27,4,27,157,8,27,11,27,12,27,158,1,27,1,27,4,27,163,8,27,11,27,12,27,
		164,3,27,167,8,27,1,28,4,28,170,8,28,11,28,12,28,171,1,28,1,28,0,0,29,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
		53,27,55,28,57,29,1,0,6,2,0,92,92,96,96,1,0,34,34,3,0,65,90,95,95,97,122,
		4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,183,0,1,1,
		0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,1,59,1,0,0,0,3,61,1,0,0,0,5,63,1,0,0,0,7,65,1,0,0,0,9,67,1,0,0,
		0,11,69,1,0,0,0,13,71,1,0,0,0,15,73,1,0,0,0,17,76,1,0,0,0,19,79,1,0,0,
		0,21,82,1,0,0,0,23,85,1,0,0,0,25,88,1,0,0,0,27,91,1,0,0,0,29,93,1,0,0,
		0,31,95,1,0,0,0,33,97,1,0,0,0,35,99,1,0,0,0,37,101,1,0,0,0,39,103,1,0,
		0,0,41,105,1,0,0,0,43,107,1,0,0,0,45,114,1,0,0,0,47,126,1,0,0,0,49,137,
		1,0,0,0,51,142,1,0,0,0,53,148,1,0,0,0,55,156,1,0,0,0,57,169,1,0,0,0,59,
		60,5,64,0,0,60,2,1,0,0,0,61,62,5,40,0,0,62,4,1,0,0,0,63,64,5,44,0,0,64,
		6,1,0,0,0,65,66,5,41,0,0,66,8,1,0,0,0,67,68,5,123,0,0,68,10,1,0,0,0,69,
		70,5,125,0,0,70,12,1,0,0,0,71,72,5,59,0,0,72,14,1,0,0,0,73,74,5,124,0,
		0,74,75,5,124,0,0,75,16,1,0,0,0,76,77,5,38,0,0,77,78,5,38,0,0,78,18,1,
		0,0,0,79,80,5,61,0,0,80,81,5,61,0,0,81,20,1,0,0,0,82,83,5,33,0,0,83,84,
		5,61,0,0,84,22,1,0,0,0,85,86,5,62,0,0,86,87,5,61,0,0,87,24,1,0,0,0,88,
		89,5,60,0,0,89,90,5,61,0,0,90,26,1,0,0,0,91,92,5,62,0,0,92,28,1,0,0,0,
		93,94,5,60,0,0,94,30,1,0,0,0,95,96,5,43,0,0,96,32,1,0,0,0,97,98,5,45,0,
		0,98,34,1,0,0,0,99,100,5,42,0,0,100,36,1,0,0,0,101,102,5,47,0,0,102,38,
		1,0,0,0,103,104,5,33,0,0,104,40,1,0,0,0,105,106,5,61,0,0,106,42,1,0,0,
		0,107,108,5,114,0,0,108,109,5,101,0,0,109,110,5,116,0,0,110,111,5,117,
		0,0,111,112,5,114,0,0,112,113,5,110,0,0,113,44,1,0,0,0,114,115,5,64,0,
		0,115,121,5,96,0,0,116,117,5,92,0,0,117,120,9,0,0,0,118,120,8,0,0,0,119,
		116,1,0,0,0,119,118,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,
		0,0,0,122,124,1,0,0,0,123,121,1,0,0,0,124,125,5,96,0,0,125,46,1,0,0,0,
		126,132,5,34,0,0,127,128,5,92,0,0,128,131,5,34,0,0,129,131,8,1,0,0,130,
		127,1,0,0,0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,
		0,0,0,133,135,1,0,0,0,134,132,1,0,0,0,135,136,5,34,0,0,136,48,1,0,0,0,
		137,138,5,116,0,0,138,139,5,114,0,0,139,140,5,117,0,0,140,141,5,101,0,
		0,141,50,1,0,0,0,142,143,5,102,0,0,143,144,5,97,0,0,144,145,5,108,0,0,
		145,146,5,115,0,0,146,147,5,101,0,0,147,52,1,0,0,0,148,152,7,2,0,0,149,
		151,7,3,0,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,
		0,0,0,153,54,1,0,0,0,154,152,1,0,0,0,155,157,7,4,0,0,156,155,1,0,0,0,157,
		158,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,166,1,0,0,0,160,162,5,
		46,0,0,161,163,7,4,0,0,162,161,1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,0,
		164,165,1,0,0,0,165,167,1,0,0,0,166,160,1,0,0,0,166,167,1,0,0,0,167,56,
		1,0,0,0,168,170,7,5,0,0,169,168,1,0,0,0,170,171,1,0,0,0,171,169,1,0,0,
		0,171,172,1,0,0,0,172,173,1,0,0,0,173,174,6,28,0,0,174,58,1,0,0,0,10,0,
		119,121,130,132,152,158,164,166,171,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
