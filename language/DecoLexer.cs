//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Deco.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DecoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		COMMAND=25, CONDITION=26, STRING=27, TRUE=28, FALSE=29, IDENTIFIER=30, 
		NUMBER=31, LINE_COMMENT=32, BLOCK_COMMENT=33, WS=34;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "COMMAND", 
		"CONDITION", "STRING", "TRUE", "FALSE", "IDENTIFIER", "NUMBER", "LINE_COMMENT", 
		"BLOCK_COMMENT", "WS"
	};


	public DecoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DecoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'@'", "'('", "','", "')'", "';'", "'if'", "'else'", "'{'", "'}'", 
		"'||'", "'&&'", "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", "'+'", "'-'", 
		"'*'", "'/'", "'!'", "'='", "'return'", null, null, null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "COMMAND", "CONDITION", "STRING", "TRUE", "FALSE", "IDENTIFIER", 
		"NUMBER", "LINE_COMMENT", "BLOCK_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Deco.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DecoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,34,230,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,
		8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,
		13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
		20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,
		24,1,24,1,24,1,24,5,24,138,8,24,10,24,12,24,141,9,24,1,24,1,24,1,25,1,
		25,1,25,1,25,1,25,5,25,150,8,25,10,25,12,25,153,9,25,1,25,1,25,1,26,1,
		26,1,26,1,26,5,26,161,8,26,10,26,12,26,164,9,26,1,26,1,26,1,27,1,27,1,
		27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,5,29,181,8,29,10,
		29,12,29,184,9,29,1,30,4,30,187,8,30,11,30,12,30,188,1,30,1,30,4,30,193,
		8,30,11,30,12,30,194,3,30,197,8,30,1,31,1,31,1,31,1,31,5,31,203,8,31,10,
		31,12,31,206,9,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,214,8,32,10,32,12,
		32,217,9,32,1,32,1,32,1,32,1,32,1,32,1,33,4,33,225,8,33,11,33,12,33,226,
		1,33,1,33,1,215,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
		23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,1,
		0,7,2,0,92,92,96,96,1,0,34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
		95,97,122,1,0,48,57,2,0,10,10,13,13,3,0,9,10,13,13,32,32,242,0,1,1,0,0,
		0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
		0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
		0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,1,69,1,0,0,0,3,71,1,0,0,0,5,73,1,0,0,0,7,75,1,0,0,0,9,77,1,0,0,0,11,
		79,1,0,0,0,13,82,1,0,0,0,15,87,1,0,0,0,17,89,1,0,0,0,19,91,1,0,0,0,21,
		94,1,0,0,0,23,97,1,0,0,0,25,100,1,0,0,0,27,103,1,0,0,0,29,106,1,0,0,0,
		31,109,1,0,0,0,33,111,1,0,0,0,35,113,1,0,0,0,37,115,1,0,0,0,39,117,1,0,
		0,0,41,119,1,0,0,0,43,121,1,0,0,0,45,123,1,0,0,0,47,125,1,0,0,0,49,132,
		1,0,0,0,51,144,1,0,0,0,53,156,1,0,0,0,55,167,1,0,0,0,57,172,1,0,0,0,59,
		178,1,0,0,0,61,186,1,0,0,0,63,198,1,0,0,0,65,209,1,0,0,0,67,224,1,0,0,
		0,69,70,5,64,0,0,70,2,1,0,0,0,71,72,5,40,0,0,72,4,1,0,0,0,73,74,5,44,0,
		0,74,6,1,0,0,0,75,76,5,41,0,0,76,8,1,0,0,0,77,78,5,59,0,0,78,10,1,0,0,
		0,79,80,5,105,0,0,80,81,5,102,0,0,81,12,1,0,0,0,82,83,5,101,0,0,83,84,
		5,108,0,0,84,85,5,115,0,0,85,86,5,101,0,0,86,14,1,0,0,0,87,88,5,123,0,
		0,88,16,1,0,0,0,89,90,5,125,0,0,90,18,1,0,0,0,91,92,5,124,0,0,92,93,5,
		124,0,0,93,20,1,0,0,0,94,95,5,38,0,0,95,96,5,38,0,0,96,22,1,0,0,0,97,98,
		5,61,0,0,98,99,5,61,0,0,99,24,1,0,0,0,100,101,5,33,0,0,101,102,5,61,0,
		0,102,26,1,0,0,0,103,104,5,62,0,0,104,105,5,61,0,0,105,28,1,0,0,0,106,
		107,5,60,0,0,107,108,5,61,0,0,108,30,1,0,0,0,109,110,5,62,0,0,110,32,1,
		0,0,0,111,112,5,60,0,0,112,34,1,0,0,0,113,114,5,43,0,0,114,36,1,0,0,0,
		115,116,5,45,0,0,116,38,1,0,0,0,117,118,5,42,0,0,118,40,1,0,0,0,119,120,
		5,47,0,0,120,42,1,0,0,0,121,122,5,33,0,0,122,44,1,0,0,0,123,124,5,61,0,
		0,124,46,1,0,0,0,125,126,5,114,0,0,126,127,5,101,0,0,127,128,5,116,0,0,
		128,129,5,117,0,0,129,130,5,114,0,0,130,131,5,110,0,0,131,48,1,0,0,0,132,
		133,5,64,0,0,133,139,5,96,0,0,134,135,5,92,0,0,135,138,9,0,0,0,136,138,
		8,0,0,0,137,134,1,0,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,
		0,139,140,1,0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,142,143,5,96,0,0,143,
		50,1,0,0,0,144,145,5,99,0,0,145,151,5,96,0,0,146,147,5,92,0,0,147,150,
		9,0,0,0,148,150,8,0,0,0,149,146,1,0,0,0,149,148,1,0,0,0,150,153,1,0,0,
		0,151,149,1,0,0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,151,1,0,0,0,154,
		155,5,96,0,0,155,52,1,0,0,0,156,162,5,34,0,0,157,158,5,92,0,0,158,161,
		5,34,0,0,159,161,8,1,0,0,160,157,1,0,0,0,160,159,1,0,0,0,161,164,1,0,0,
		0,162,160,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,162,1,0,0,0,165,
		166,5,34,0,0,166,54,1,0,0,0,167,168,5,116,0,0,168,169,5,114,0,0,169,170,
		5,117,0,0,170,171,5,101,0,0,171,56,1,0,0,0,172,173,5,102,0,0,173,174,5,
		97,0,0,174,175,5,108,0,0,175,176,5,115,0,0,176,177,5,101,0,0,177,58,1,
		0,0,0,178,182,7,2,0,0,179,181,7,3,0,0,180,179,1,0,0,0,181,184,1,0,0,0,
		182,180,1,0,0,0,182,183,1,0,0,0,183,60,1,0,0,0,184,182,1,0,0,0,185,187,
		7,4,0,0,186,185,1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,
		0,189,196,1,0,0,0,190,192,5,46,0,0,191,193,7,4,0,0,192,191,1,0,0,0,193,
		194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,190,1,
		0,0,0,196,197,1,0,0,0,197,62,1,0,0,0,198,199,5,47,0,0,199,200,5,47,0,0,
		200,204,1,0,0,0,201,203,8,5,0,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,
		1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,6,31,0,
		0,208,64,1,0,0,0,209,210,5,47,0,0,210,211,5,42,0,0,211,215,1,0,0,0,212,
		214,9,0,0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,216,1,0,0,0,215,213,1,
		0,0,0,216,218,1,0,0,0,217,215,1,0,0,0,218,219,5,42,0,0,219,220,5,47,0,
		0,220,221,1,0,0,0,221,222,6,32,0,0,222,66,1,0,0,0,223,225,7,6,0,0,224,
		223,1,0,0,0,225,226,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,228,1,
		0,0,0,228,229,6,33,0,0,229,68,1,0,0,0,14,0,137,139,149,151,160,162,182,
		188,194,196,204,215,226,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
