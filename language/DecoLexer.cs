//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Deco.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DecoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, COMMAND=14, STRING=15, IDENTIFIER=16, 
		NUMBER=17, WS=18;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "COMMAND", "STRING", "IDENTIFIER", 
		"NUMBER", "WS"
	};


	public DecoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DecoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'@'", "'('", "','", "')'", "'{'", "'}'", "';'", "'+'", "'-'", "'*'", 
		"'/'", "'='", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "COMMAND", "STRING", "IDENTIFIER", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Deco.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DecoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,18,109,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,5,13,74,8,13,10,13,
		12,13,77,9,13,1,13,1,13,1,14,1,14,1,14,5,14,84,8,14,10,14,12,14,87,9,14,
		1,14,1,14,1,15,1,15,5,15,93,8,15,10,15,12,15,96,9,15,1,16,4,16,99,8,16,
		11,16,12,16,100,1,17,4,17,104,8,17,11,17,12,17,105,1,17,1,17,0,0,18,1,
		1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
		15,31,16,33,17,35,18,1,0,6,2,0,92,92,96,96,1,0,34,34,3,0,65,90,95,95,97,
		122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,115,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,1,37,1,0,0,0,3,39,1,0,0,0,5,41,1,0,0,0,7,43,1,0,0,0,9,45,
		1,0,0,0,11,47,1,0,0,0,13,49,1,0,0,0,15,51,1,0,0,0,17,53,1,0,0,0,19,55,
		1,0,0,0,21,57,1,0,0,0,23,59,1,0,0,0,25,61,1,0,0,0,27,68,1,0,0,0,29,80,
		1,0,0,0,31,90,1,0,0,0,33,98,1,0,0,0,35,103,1,0,0,0,37,38,5,64,0,0,38,2,
		1,0,0,0,39,40,5,40,0,0,40,4,1,0,0,0,41,42,5,44,0,0,42,6,1,0,0,0,43,44,
		5,41,0,0,44,8,1,0,0,0,45,46,5,123,0,0,46,10,1,0,0,0,47,48,5,125,0,0,48,
		12,1,0,0,0,49,50,5,59,0,0,50,14,1,0,0,0,51,52,5,43,0,0,52,16,1,0,0,0,53,
		54,5,45,0,0,54,18,1,0,0,0,55,56,5,42,0,0,56,20,1,0,0,0,57,58,5,47,0,0,
		58,22,1,0,0,0,59,60,5,61,0,0,60,24,1,0,0,0,61,62,5,114,0,0,62,63,5,101,
		0,0,63,64,5,116,0,0,64,65,5,117,0,0,65,66,5,114,0,0,66,67,5,110,0,0,67,
		26,1,0,0,0,68,69,5,64,0,0,69,75,5,96,0,0,70,71,5,92,0,0,71,74,9,0,0,0,
		72,74,8,0,0,0,73,70,1,0,0,0,73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,
		75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,5,96,0,0,79,28,1,0,0,0,
		80,85,5,34,0,0,81,84,5,34,0,0,82,84,8,1,0,0,83,81,1,0,0,0,83,82,1,0,0,
		0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,88,1,0,0,0,87,85,1,0,0,
		0,88,89,5,34,0,0,89,30,1,0,0,0,90,94,7,2,0,0,91,93,7,3,0,0,92,91,1,0,0,
		0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,32,1,0,0,0,96,94,1,0,0,
		0,97,99,7,4,0,0,98,97,1,0,0,0,99,100,1,0,0,0,100,98,1,0,0,0,100,101,1,
		0,0,0,101,34,1,0,0,0,102,104,7,5,0,0,103,102,1,0,0,0,104,105,1,0,0,0,105,
		103,1,0,0,0,105,106,1,0,0,0,106,107,1,0,0,0,107,108,6,17,0,0,108,36,1,
		0,0,0,8,0,73,75,83,85,94,100,105,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
