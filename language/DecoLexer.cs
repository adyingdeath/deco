//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Deco.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DecoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		COMMAND=25, STRING=26, TRUE=27, FALSE=28, IDENTIFIER=29, NUMBER=30, LINE_COMMENT=31, 
		BLOCK_COMMENT=32, WS=33;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "COMMAND", 
		"STRING", "TRUE", "FALSE", "IDENTIFIER", "NUMBER", "LINE_COMMENT", "BLOCK_COMMENT", 
		"WS"
	};


	public DecoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DecoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'@'", "'('", "','", "')'", "';'", "'if'", "'else'", "'{'", "'}'", 
		"'||'", "'&&'", "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", "'+'", "'-'", 
		"'*'", "'/'", "'!'", "'='", "'return'", null, null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "COMMAND", "STRING", "TRUE", "FALSE", "IDENTIFIER", "NUMBER", "LINE_COMMENT", 
		"BLOCK_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Deco.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DecoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,33,216,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
		1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,
		14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,
		21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
		24,1,24,5,24,136,8,24,10,24,12,24,139,9,24,1,24,1,24,1,25,1,25,1,25,1,
		25,5,25,147,8,25,10,25,12,25,150,9,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
		26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,5,28,167,8,28,10,28,12,28,170,
		9,28,1,29,4,29,173,8,29,11,29,12,29,174,1,29,1,29,4,29,179,8,29,11,29,
		12,29,180,3,29,183,8,29,1,30,1,30,1,30,1,30,5,30,189,8,30,10,30,12,30,
		192,9,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,200,8,31,10,31,12,31,203,9,
		31,1,31,1,31,1,31,1,31,1,31,1,32,4,32,211,8,32,11,32,12,32,212,1,32,1,
		32,1,201,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
		49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,1,0,7,2,0,92,92,
		96,96,1,0,34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,
		0,48,57,2,0,10,10,13,13,3,0,9,10,13,13,32,32,226,0,1,1,0,0,0,0,3,1,0,0,
		0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
		0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
		0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,69,1,0,0,
		0,5,71,1,0,0,0,7,73,1,0,0,0,9,75,1,0,0,0,11,77,1,0,0,0,13,80,1,0,0,0,15,
		85,1,0,0,0,17,87,1,0,0,0,19,89,1,0,0,0,21,92,1,0,0,0,23,95,1,0,0,0,25,
		98,1,0,0,0,27,101,1,0,0,0,29,104,1,0,0,0,31,107,1,0,0,0,33,109,1,0,0,0,
		35,111,1,0,0,0,37,113,1,0,0,0,39,115,1,0,0,0,41,117,1,0,0,0,43,119,1,0,
		0,0,45,121,1,0,0,0,47,123,1,0,0,0,49,130,1,0,0,0,51,142,1,0,0,0,53,153,
		1,0,0,0,55,158,1,0,0,0,57,164,1,0,0,0,59,172,1,0,0,0,61,184,1,0,0,0,63,
		195,1,0,0,0,65,210,1,0,0,0,67,68,5,64,0,0,68,2,1,0,0,0,69,70,5,40,0,0,
		70,4,1,0,0,0,71,72,5,44,0,0,72,6,1,0,0,0,73,74,5,41,0,0,74,8,1,0,0,0,75,
		76,5,59,0,0,76,10,1,0,0,0,77,78,5,105,0,0,78,79,5,102,0,0,79,12,1,0,0,
		0,80,81,5,101,0,0,81,82,5,108,0,0,82,83,5,115,0,0,83,84,5,101,0,0,84,14,
		1,0,0,0,85,86,5,123,0,0,86,16,1,0,0,0,87,88,5,125,0,0,88,18,1,0,0,0,89,
		90,5,124,0,0,90,91,5,124,0,0,91,20,1,0,0,0,92,93,5,38,0,0,93,94,5,38,0,
		0,94,22,1,0,0,0,95,96,5,61,0,0,96,97,5,61,0,0,97,24,1,0,0,0,98,99,5,33,
		0,0,99,100,5,61,0,0,100,26,1,0,0,0,101,102,5,62,0,0,102,103,5,61,0,0,103,
		28,1,0,0,0,104,105,5,60,0,0,105,106,5,61,0,0,106,30,1,0,0,0,107,108,5,
		62,0,0,108,32,1,0,0,0,109,110,5,60,0,0,110,34,1,0,0,0,111,112,5,43,0,0,
		112,36,1,0,0,0,113,114,5,45,0,0,114,38,1,0,0,0,115,116,5,42,0,0,116,40,
		1,0,0,0,117,118,5,47,0,0,118,42,1,0,0,0,119,120,5,33,0,0,120,44,1,0,0,
		0,121,122,5,61,0,0,122,46,1,0,0,0,123,124,5,114,0,0,124,125,5,101,0,0,
		125,126,5,116,0,0,126,127,5,117,0,0,127,128,5,114,0,0,128,129,5,110,0,
		0,129,48,1,0,0,0,130,131,5,64,0,0,131,137,5,96,0,0,132,133,5,92,0,0,133,
		136,9,0,0,0,134,136,8,0,0,0,135,132,1,0,0,0,135,134,1,0,0,0,136,139,1,
		0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,140,1,0,0,0,139,137,1,0,0,0,
		140,141,5,96,0,0,141,50,1,0,0,0,142,148,5,34,0,0,143,144,5,92,0,0,144,
		147,5,34,0,0,145,147,8,1,0,0,146,143,1,0,0,0,146,145,1,0,0,0,147,150,1,
		0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,151,1,0,0,0,150,148,1,0,0,0,
		151,152,5,34,0,0,152,52,1,0,0,0,153,154,5,116,0,0,154,155,5,114,0,0,155,
		156,5,117,0,0,156,157,5,101,0,0,157,54,1,0,0,0,158,159,5,102,0,0,159,160,
		5,97,0,0,160,161,5,108,0,0,161,162,5,115,0,0,162,163,5,101,0,0,163,56,
		1,0,0,0,164,168,7,2,0,0,165,167,7,3,0,0,166,165,1,0,0,0,167,170,1,0,0,
		0,168,166,1,0,0,0,168,169,1,0,0,0,169,58,1,0,0,0,170,168,1,0,0,0,171,173,
		7,4,0,0,172,171,1,0,0,0,173,174,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,
		0,175,182,1,0,0,0,176,178,5,46,0,0,177,179,7,4,0,0,178,177,1,0,0,0,179,
		180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,183,1,0,0,0,182,176,1,
		0,0,0,182,183,1,0,0,0,183,60,1,0,0,0,184,185,5,47,0,0,185,186,5,47,0,0,
		186,190,1,0,0,0,187,189,8,5,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,188,
		1,0,0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,0,193,194,6,30,0,
		0,194,62,1,0,0,0,195,196,5,47,0,0,196,197,5,42,0,0,197,201,1,0,0,0,198,
		200,9,0,0,0,199,198,1,0,0,0,200,203,1,0,0,0,201,202,1,0,0,0,201,199,1,
		0,0,0,202,204,1,0,0,0,203,201,1,0,0,0,204,205,5,42,0,0,205,206,5,47,0,
		0,206,207,1,0,0,0,207,208,6,31,0,0,208,64,1,0,0,0,209,211,7,6,0,0,210,
		209,1,0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,214,1,
		0,0,0,214,215,6,32,0,0,215,66,1,0,0,0,12,0,135,137,146,148,168,174,180,
		182,190,201,212,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
