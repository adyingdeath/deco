@load
int main() {
    print("");
    print("--- Running if statement tests ---");

    test_simple_if();
    test_if_else();
    test_if_else_if();
    test_nested_if();
    test_complex_conditions();

    print("");
    print("--- All if statement tests complete ---");
}

// Helper function to print test results
void check(string testName, bool passed) {
    if (passed) {
        print("[PASS] ", testName);
    } else {
        print("[FAIL] ", testName);
    }
}

// Test 1: Simple if statements
void test_simple_if() {
    print("");
    print("--- Testing simple if ---");
    bool executed;

    // Test 1.1: if(true) should execute
    executed = false;
    if (true) {
        executed = true;
    }
    check("if(true) executes", executed == true);

    // Test 1.2: if(false) should not execute
    executed = true;
    if (false) {
        executed = false;
    }
    check("if(false) does not execute", executed == true);

    // Test 1.3: if with a single command (tests compiler optimization)
    // This requires manual verification by checking the scoreboard.
    // The value of 'test_var_if_command' for player 'deco_test' should be 1.
    @`scoreboard objectives add deco_test dummy`;
    @`scoreboard players set deco_test test_var_if_command 0`;
    if (true) {
        @`scoreboard players set deco_test test_var_if_command 1`;
    }
    if (false) {
        // This should not run, so the value should remain 1
        @`scoreboard players set deco_test test_var_if_command 99`;
    }
    print("Test 'if with command' executed. Check scoreboard 'deco_test' for player 'test_var_if_command', it should be 1.");
}

// Test 2: If-else statements
void test_if_else() {
    print("");
    print("--- Testing if-else ---");
    int result;

    // Test 2.1: if(true) else
    result = 0;
    if (true) {
        result = 1;
    } else {
        result = 2;
    }
    check("if(true) else - if block runs", result == 1);

    // Test 2.2: if(false) else
    result = 0;
    if (false) {
        result = 1;
    } else {
        result = 2;
    }
    check("if(false) else - else block runs", result == 2);
}

// Test 3: If-else if-else statements
void test_if_else_if() {
    print("");
    print("--- Testing if-else if-else ---");
    int result;

    // Test 3.1: First condition is true
    result = 0;
    if (true) {
        result = 1;
    } else if (true) {
        result = 2;
    } else {
        result = 3;
    }
    check("if-else if-else: first branch", result == 1);

    // Test 3.2: Second condition is true
    result = 0;
    if (false) {
        result = 1;
    } else if (true) {
        result = 2;
    } else {
        result = 3;
    }
    check("if-else if-else: second branch", result == 2);

    // Test 3.3: Third (else) condition is true
    result = 0;
    if (false) {
        result = 1;
    } else if (false) {
        result = 2;
    } else {
        result = 3;
    }
    check("if-else if-else: else branch", result == 3);

    // Test 3.4: Multiple else-ifs, one is true
    result = 0;
    if (false) {
        result = 1;
    } else if (false) {
        result = 2;
    } else if (true) {
        result = 3;
    } else {
        result = 4;
    }
    check("if-else if-else: multiple else if, third branch", result == 3);
    
    // Test 3.5: if-else if without a final else, second branch taken
    result = 5;
    if (false) {
        result = 1;
    } else if (true) {
        result = 2;
    }
    check("if-else if (no else): second branch", result == 2);

    // Test 3.6: if-else if without a final else, no branch taken
    result = 5;
    if (false) {
        result = 1;
    } else if (false) {
        result = 2;
    }
    check("if-else if (no else): no branch taken", result == 5);
}

// Test 4: Nested if statements
void test_nested_if() {
    print("");
    print("--- Testing nested if ---");
    int result;

    // Test 4.1: Nested if(true) { if(true) }
    result = 0;
    if (true) {
        if (true) {
            result = 1;
        } else {
            result = 2;
        }
    } else {
        result = 3;
    }
    check("nested if: true->true", result == 1);

    // Test 4.2: Nested if(true) { if(false) }
    result = 0;
    if (true) {
        if (false) {
            result = 1;
        } else {
            result = 2;
        }
    } else {
        result = 3;
    }
    check("nested if: true->false", result == 2);

    // Test 4.3: Nested if(false)
    result = 0;
    if (false) {
        if (true) {
            result = 1;
        }
    } else {
        result = 3;
    }
    check("nested if: false->(ignored)", result == 3);
}

// Test 5: Complex conditions
void test_complex_conditions() {
    print("");
    print("--- Testing complex conditions ---");
    bool executed;
    int a;
    int b;
    a = 10;
    b = 20;

    // Test 5.1: && operator
    executed = false;
    if (a < 15 && b > 15) {
        executed = true;
    }
    check("complex: a < 15 && b > 15", executed == true);

    // Test 5.2: || operator
    executed = false;
    if (a > 15 || b > 15) {
        executed = true;
    }
    check("complex: a > 15 || b > 15", executed == true);

    // Test 5.3: ! (not) operator
    executed = false;
    if (!(a > 15)) {
        executed = true;
    }
    check("complex: !(a > 15)", executed == true);

    // Test 5.4: Combination of operators
    executed = false;
    if ((a == 10 && b == 20) || (a == 0 && b == 0)) {
        if (!(a != 10) && b > 0) {
            executed = true;
        }
    }
    check("complex: combination", executed == true);
}
